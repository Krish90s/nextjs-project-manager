// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  description String   @db.Text
  status      Status   @default(OPEN)
  sprints     Sprint[]
  members     Member[] // Define a relation to the Member model
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map(name: "projects")
}

model Member {
  id        String   @id @default(cuid())
  role      String
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "members")
}

model Sprint {
  id        String   @id @default(cuid())
  title     String
  status    Status   @default(OPEN)
  project   Project? @relation(fields: [projectId], references: [id])
  stories   Story[] // Define a relation to the Story model
  projectId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "sprints")
}

model Story {
  id            String   @id @default(cuid())
  title         String
  status        Status   @default(OPEN)
  sprint        Sprint   @relation(fields: [sprintId], references: [id])
  assignedUsers User[] // Define a relation to the User model
  sprintId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map(name: "stories")
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  members         Member[] // Define the opposite relation to the Member model
  assignedStories Story[] // Define a relation to the Story model

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verificationTokens")
}
